# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sqliteog_pb2 as sqliteog__pb2


class SqliteOGStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/SqliteOG/Query',
                request_serializer=sqliteog__pb2.Statement.SerializeToString,
                response_deserializer=sqliteog__pb2.QueryResult.FromString,
                )
        self.Execute = channel.unary_unary(
                '/SqliteOG/Execute',
                request_serializer=sqliteog__pb2.Statement.SerializeToString,
                response_deserializer=sqliteog__pb2.ExecuteResult.FromString,
                )
        self.ExecuteOrQuery = channel.unary_unary(
                '/SqliteOG/ExecuteOrQuery',
                request_serializer=sqliteog__pb2.Statement.SerializeToString,
                response_deserializer=sqliteog__pb2.ExecuteOrQueryResult.FromString,
                )
        self.Callback = channel.stream_stream(
                '/SqliteOG/Callback',
                request_serializer=sqliteog__pb2.InvocationResult.SerializeToString,
                response_deserializer=sqliteog__pb2.Invoke.FromString,
                )
        self.Connection = channel.unary_unary(
                '/SqliteOG/Connection',
                request_serializer=sqliteog__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=sqliteog__pb2.ConnectionId.FromString,
                )
        self.Close = channel.unary_unary(
                '/SqliteOG/Close',
                request_serializer=sqliteog__pb2.ConnectionId.SerializeToString,
                response_deserializer=sqliteog__pb2.Empty.FromString,
                )
        self.IsValid = channel.unary_unary(
                '/SqliteOG/IsValid',
                request_serializer=sqliteog__pb2.ConnectionId.SerializeToString,
                response_deserializer=sqliteog__pb2.Empty.FromString,
                )
        self.Ping = channel.unary_unary(
                '/SqliteOG/Ping',
                request_serializer=sqliteog__pb2.Empty.SerializeToString,
                response_deserializer=sqliteog__pb2.Empty.FromString,
                )
        self.ResetSession = channel.unary_unary(
                '/SqliteOG/ResetSession',
                request_serializer=sqliteog__pb2.ConnectionId.SerializeToString,
                response_deserializer=sqliteog__pb2.ConnectionId.FromString,
                )


class SqliteOGServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteOrQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Callback(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsValid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqliteOGServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=sqliteog__pb2.Statement.FromString,
                    response_serializer=sqliteog__pb2.QueryResult.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=sqliteog__pb2.Statement.FromString,
                    response_serializer=sqliteog__pb2.ExecuteResult.SerializeToString,
            ),
            'ExecuteOrQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteOrQuery,
                    request_deserializer=sqliteog__pb2.Statement.FromString,
                    response_serializer=sqliteog__pb2.ExecuteOrQueryResult.SerializeToString,
            ),
            'Callback': grpc.stream_stream_rpc_method_handler(
                    servicer.Callback,
                    request_deserializer=sqliteog__pb2.InvocationResult.FromString,
                    response_serializer=sqliteog__pb2.Invoke.SerializeToString,
            ),
            'Connection': grpc.unary_unary_rpc_method_handler(
                    servicer.Connection,
                    request_deserializer=sqliteog__pb2.ConnectionRequest.FromString,
                    response_serializer=sqliteog__pb2.ConnectionId.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=sqliteog__pb2.ConnectionId.FromString,
                    response_serializer=sqliteog__pb2.Empty.SerializeToString,
            ),
            'IsValid': grpc.unary_unary_rpc_method_handler(
                    servicer.IsValid,
                    request_deserializer=sqliteog__pb2.ConnectionId.FromString,
                    response_serializer=sqliteog__pb2.Empty.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sqliteog__pb2.Empty.FromString,
                    response_serializer=sqliteog__pb2.Empty.SerializeToString,
            ),
            'ResetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetSession,
                    request_deserializer=sqliteog__pb2.ConnectionId.FromString,
                    response_serializer=sqliteog__pb2.ConnectionId.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SqliteOG', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SqliteOG(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/Query',
            sqliteog__pb2.Statement.SerializeToString,
            sqliteog__pb2.QueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/Execute',
            sqliteog__pb2.Statement.SerializeToString,
            sqliteog__pb2.ExecuteResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteOrQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/ExecuteOrQuery',
            sqliteog__pb2.Statement.SerializeToString,
            sqliteog__pb2.ExecuteOrQueryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Callback(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/SqliteOG/Callback',
            sqliteog__pb2.InvocationResult.SerializeToString,
            sqliteog__pb2.Invoke.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/Connection',
            sqliteog__pb2.ConnectionRequest.SerializeToString,
            sqliteog__pb2.ConnectionId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/Close',
            sqliteog__pb2.ConnectionId.SerializeToString,
            sqliteog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsValid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/IsValid',
            sqliteog__pb2.ConnectionId.SerializeToString,
            sqliteog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/Ping',
            sqliteog__pb2.Empty.SerializeToString,
            sqliteog__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SqliteOG/ResetSession',
            sqliteog__pb2.ConnectionId.SerializeToString,
            sqliteog__pb2.ConnectionId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
